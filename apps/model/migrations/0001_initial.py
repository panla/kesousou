# Generated by Django 3.0.7 on 2020-08-23 09:54

from django.db import migrations, models
import django_mysql.models
import model.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('page', models.CharField(max_length=400, verbose_name='操作页面')),
                ('action', models.CharField(max_length=100, verbose_name='操作')),
                ('ip', models.CharField(max_length=100, verbose_name='用户ip')),
                ('terminal', models.CharField(max_length=100, verbose_name='操作使用的终端')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='用户名')),
                ('role', models.CharField(max_length=100, verbose_name='用户类型')),
                ('description', models.TextField(verbose_name='用户操作说明')),
            ],
            options={
                'db_table': 'action_records',
            },
        ),
        migrations.CreateModel(
            name='Expert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(db_index=True, max_length=20, verbose_name='专家姓名')),
                ('organization', models.CharField(db_index=True, max_length=200, verbose_name='所属机构')),
                ('department', models.CharField(max_length=50, null=True, verbose_name='学院/学部/研究所/部门')),
                ('keywords', django_mysql.models.JSONField(default=dict, null=True, verbose_name='专家关键词')),
                ('personal_introduction', models.TextField(null=True, verbose_name='个人简介')),
                ('birth', models.CharField(max_length=20, null=True, verbose_name='出生日期')),
                ('info_link', models.CharField(max_length=400, null=True, verbose_name='专家信息链接')),
                ('post', models.CharField(max_length=20, null=True, verbose_name='职务')),
                ('title', models.CharField(max_length=50, null=True, verbose_name='职称')),
                ('degree', models.CharField(max_length=50, null=True, verbose_name='学历/学位')),
                ('honorary_titles', models.CharField(max_length=100, null=True, verbose_name='荣誉称号')),
                ('graduated_from', models.CharField(max_length=50, null=True, verbose_name='毕业院校')),
                ('major', models.CharField(max_length=50, null=True, verbose_name='专业/学科')),
                ('research_areas', models.CharField(max_length=100, null=True, verbose_name='研究方向')),
                ('projects', models.TextField(null=True, verbose_name='成果')),
                ('contact', models.CharField(max_length=100, null=True, verbose_name='联系方式')),
                ('province', models.CharField(max_length=30, null=True, verbose_name='省份')),
                ('city', models.CharField(max_length=30, null=True, verbose_name='城市')),
                ('address', models.CharField(max_length=100, null=True, verbose_name='办公地点')),
                ('origins', models.CharField(max_length=50, null=True, verbose_name='数据来源')),
            ],
            options={
                'db_table': 'experts',
                'unique_together': {('name', 'organization')},
            },
        ),
        migrations.CreateModel(
            name='Periodical',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('original_id', models.CharField(db_index=True, max_length=100, null=True, unique=True, verbose_name='源数据id')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='期刊标题')),
                ('doi', models.CharField(db_index=True, max_length=100, unique=True, verbose_name='doi')),
                ('abstract', models.TextField(null=True, verbose_name='期刊简介')),
                ('publish_date', models.DateField(null=True, verbose_name='发布日期')),
                ('keywords', django_mysql.models.JSONField(default=dict, null=True, verbose_name='关键词')),
                ('creators', django_mysql.models.JSONField(default=dict, verbose_name='作者')),
                ('first_creator', models.CharField(max_length=10, null=True, verbose_name='第一作者')),
                ('organizations', django_mysql.models.JSONField(default=dict, verbose_name='作者机构')),
                ('periodical_name', models.CharField(max_length=100, null=True, verbose_name='期刊名称')),
                ('periodical_number', models.CharField(max_length=10, null=True, verbose_name='卷')),
                ('periodical_column', models.CharField(max_length=50, null=True, verbose_name='栏目')),
                ('foundations', django_mysql.models.JSONField(default=dict, null=True, verbose_name='基金项目')),
                ('classification', django_mysql.models.JSONField(default=dict, null=True, verbose_name='分类号')),
                ('experts', models.ManyToManyField(db_index=True, related_name='periodicals', to='model.Expert')),
            ],
            options={
                'db_table': 'periodicals',
            },
        ),
        migrations.CreateModel(
            name='Patent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('original_id', models.CharField(db_index=True, max_length=100, null=True, unique=True, verbose_name='源数据id')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='专利名称')),
                ('abstract', models.TextField(null=True, verbose_name='专利简介')),
                ('patent_type', models.CharField(max_length=20, null=True, verbose_name='专利类型')),
                ('patent_code', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='专利申请号')),
                ('application_date', models.DateTimeField(null=True, verbose_name='专利申请日期')),
                ('publication_number', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='专利公开号')),
                ('publication_date', models.DateTimeField(null=True, verbose_name='专利公告日期')),
                ('main_classifications', django_mysql.models.JSONField(default=dict, null=True, verbose_name='主分类号')),
                ('classifications', django_mysql.models.JSONField(default=dict, null=True, verbose_name='分类号')),
                ('applicants', django_mysql.models.JSONField(default=dict, null=True, verbose_name='申请人')),
                ('inventors', django_mysql.models.JSONField(default=dict, null=True, verbose_name='发明人')),
                ('applicant_address', models.CharField(max_length=200, null=True, verbose_name='主发明人地址')),
                ('claim', models.TextField(null=True, verbose_name='主权项')),
                ('region_code', models.CharField(max_length=20, null=True, verbose_name='国别省市代码')),
                ('legal_status', models.CharField(max_length=10, null=True, verbose_name='法律状态')),
                ('experts', models.ManyToManyField(db_index=True, related_name='patents', to='model.Expert')),
            ],
            options={
                'db_table': 'patents',
            },
        ),
        migrations.CreateModel(
            name='Conferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('original_id', models.CharField(db_index=True, max_length=100, null=True, unique=True, verbose_name='源数据id')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='论文标题')),
                ('abstract', models.TextField(null=True, verbose_name='论文摘要')),
                ('keywords', django_mysql.models.JSONField(default=dict, null=True, verbose_name='关键词')),
                ('meeting_title', models.CharField(max_length=100, null=True, verbose_name='会议名称')),
                ('meeting_date', models.DateField(null=True, verbose_name='会议时间')),
                ('creators', django_mysql.models.JSONField(default=dict, verbose_name='作者')),
                ('first_creator', models.CharField(db_index=True, max_length=20, null=True, verbose_name='第一作者')),
                ('organizations', django_mysql.models.JSONField(default=dict, verbose_name='作者机构')),
                ('sponsors', django_mysql.models.JSONField(default=dict, null=True, verbose_name='主办单位')),
                ('meeting_corpus', models.CharField(max_length=100, null=True, verbose_name='母体文献')),
                ('language', models.CharField(default='中文', max_length=10, verbose_name='语种')),
                ('classifications', django_mysql.models.JSONField(default=dict, null=True, verbose_name='机标分类号')),
                ('publish_date', models.DateField(null=True, verbose_name='出版日期')),
                ('page', models.CharField(max_length=10, null=True, verbose_name='页码')),
                ('experts', models.ManyToManyField(db_index=True, related_name='conferences', to='model.Expert')),
            ],
            options={
                'db_table': 'conferences',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('original_id', models.CharField(db_index=True, max_length=100, null=True, unique=True, verbose_name='源数据id')),
                ('sn', models.CharField(db_index=True, max_length=100, null=True, unique=True, verbose_name='项目年度编号')),
                ('title', models.CharField(db_index=True, max_length=100, verbose_name='标题')),
                ('organizations', django_mysql.models.JSONField(default=dict, null=True, verbose_name='完成单位')),
                ('creators', django_mysql.models.JSONField(default=dict, null=True, verbose_name='完成人')),
                ('publish_year', models.CharField(max_length=20, null=True, verbose_name='公布年份')),
                ('category', models.CharField(max_length=20, null=True, verbose_name='中图分类')),
                ('keywords', django_mysql.models.JSONField(default=dict, null=True, verbose_name='关键词')),
                ('abstract', models.TextField(null=True, verbose_name='简介')),
                ('province', models.CharField(max_length=20, null=True, verbose_name='省市')),
                ('trade_name', django_mysql.models.JSONField(default=dict, null=True, verbose_name='应用行业名称')),
                ('level', models.CharField(max_length=20, null=True, verbose_name='成果水平')),
                ('contact_unit', models.CharField(max_length=200, null=True, verbose_name='联系单位')),
                ('contact_address', models.CharField(max_length=200, null=True, verbose_name='联系单位地址')),
                ('experts', models.ManyToManyField(db_index=True, related_name='achievements', to='model.Expert')),
            ],
            options={
                'db_table': 'achievements',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('username', models.CharField(max_length=150, null=True, verbose_name='username')),
                ('mobile', models.CharField(db_index=True, max_length=11, null=True, unique=True, verbose_name='手机号')),
                ('email', models.EmailField(db_index=True, max_length=254, null=True, unique=True, verbose_name='email')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('avatar', models.CharField(max_length=400, null=True, verbose_name='用户头像url')),
                ('location', models.CharField(max_length=1000, null=True, verbose_name='所在地')),
                ('organization', models.CharField(max_length=1000, null=True, verbose_name='所属机构')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', model.models.UserManager()),
            ],
        ),
    ]
